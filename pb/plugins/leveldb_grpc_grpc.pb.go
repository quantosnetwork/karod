// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: plugins/storage/leveldb_plugin/proto/leveldb_grpc.proto

package plugins

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	plugins "karod/plugins/storage/leveldb_plugin"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LevelDBGrpcClient is the client API for LevelDBGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LevelDBGrpcClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type levelDBGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewLevelDBGrpcClient(cc grpc.ClientConnInterface) LevelDBGrpcClient {
	return &levelDBGrpcClient{cc}
}

func (c *levelDBGrpcClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/pluginspb.LevelDBGrpc/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelDBGrpcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/pluginspb.LevelDBGrpc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LevelDBGrpcServer is the server API for LevelDBGrpc service.
// All implementations must embed UnimplementedLevelDBGrpcServer
// for forward compatibility
type LevelDBGrpcServer interface {
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedLevelDBGrpcServer()
}

// UnimplementedLevelDBGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedLevelDBGrpcServer struct {
}

func (UnimplementedLevelDBGrpcServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedLevelDBGrpcServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLevelDBGrpcServer) mustEmbedUnimplementedLevelDBGrpcServer() {}

// UnsafeLevelDBGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LevelDBGrpcServer will
// result in compilation errors.
type UnsafeLevelDBGrpcServer interface {
	mustEmbedUnimplementedLevelDBGrpcServer()
}

func RegisterLevelDBGrpcServer(s grpc.ServiceRegistrar, srv *plugins.LevelDBGrpcServer) {
	s.RegisterService(&LevelDBGrpc_ServiceDesc, srv)
}

func _LevelDBGrpc_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelDBGrpcServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginspb.LevelDBGrpc/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelDBGrpcServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LevelDBGrpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelDBGrpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginspb.LevelDBGrpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelDBGrpcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LevelDBGrpc_ServiceDesc is the grpc.ServiceDesc for LevelDBGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LevelDBGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginspb.LevelDBGrpc",
	HandlerType: (*LevelDBGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _LevelDBGrpc_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LevelDBGrpc_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/storage/leveldb_plugin/proto/leveldb_grpc.proto",
}
