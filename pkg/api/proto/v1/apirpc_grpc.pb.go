// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/proto/v1/apirpc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiTestServiceClient is the client API for ApiTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiTestServiceClient interface {
	SendRequest(ctx context.Context, in *ApiRequest, opts ...grpc.CallOption) (*ApiResponse, error)
}

type apiTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiTestServiceClient(cc grpc.ClientConnInterface) ApiTestServiceClient {
	return &apiTestServiceClient{cc}
}

func (c *apiTestServiceClient) SendRequest(ctx context.Context, in *ApiRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, "/v1.ApiTestService/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiTestServiceServer is the server API for ApiTestService service.
// All implementations should embed UnimplementedApiTestServiceServer
// for forward compatibility
type ApiTestServiceServer interface {
	SendRequest(context.Context, *ApiRequest) (*ApiResponse, error)
}

// UnimplementedApiTestServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiTestServiceServer struct {
}

func (UnimplementedApiTestServiceServer) SendRequest(context.Context, *ApiRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}

// UnsafeApiTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiTestServiceServer will
// result in compilation errors.
type UnsafeApiTestServiceServer interface {
	mustEmbedUnimplementedApiTestServiceServer()
}

func RegisterApiTestServiceServer(s grpc.ServiceRegistrar, srv ApiTestServiceServer) {
	s.RegisterService(&ApiTestService_ServiceDesc, srv)
}

func _ApiTestService_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiTestServiceServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApiTestService/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiTestServiceServer).SendRequest(ctx, req.(*ApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiTestService_ServiceDesc is the grpc.ServiceDesc for ApiTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ApiTestService",
	HandlerType: (*ApiTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequest",
			Handler:    _ApiTestService_SendRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/apirpc.proto",
}

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	GetNodeInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	GetChainInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ChainInfoResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetNodeInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, "/v1.ApiService/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetChainInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ChainInfoResponse, error) {
	out := new(ChainInfoResponse)
	err := c.cc.Invoke(ctx, "/v1.ApiService/GetChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations should embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	GetNodeInfo(context.Context, *EmptyRequest) (*NodeInfoResponse, error)
	GetChainInfo(context.Context, *EmptyRequest) (*ChainInfoResponse, error)
}

// UnimplementedApiServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) GetNodeInfo(context.Context, *EmptyRequest) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedApiServiceServer) GetChainInfo(context.Context, *EmptyRequest) (*ChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainInfo not implemented")
}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApiService/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNodeInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApiService/GetChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetChainInfo(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _ApiService_GetNodeInfo_Handler,
		},
		{
			MethodName: "GetChainInfo",
			Handler:    _ApiService_GetChainInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/apirpc.proto",
}
