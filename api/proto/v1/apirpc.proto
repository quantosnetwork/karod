syntax = "proto3";
package v1;
option go_package="api/v1";

import "google/api/annotations.proto";
import "third_party/protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Quantos Karo Api Service";
    version: "1.0";
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

message ApiRequest {
  int64 id = 1;
  string requestKey = 2;
  bool echoKey = 3; // for testing

}

message ApiResponse {
  int64 id = 1;
  int32 status = 2;
  string message = 3;
  google.protobuf.Timestamp time = 4;

}

service ApiTestService {
  rpc SendRequest(ApiRequest) returns (ApiResponse);
}

service ApiService {

  rpc GetNodeInfo (EmptyRequest) returns (NodeInfoResponse) {
    option (google.api.http) = {
      get: "/getNodeInfo"
    };
  }

  rpc GetChainInfo (EmptyRequest) returns (ChainInfoResponse) {
    option (google.api.http) = {
      get: "/getChainInfo"
    };
  }

}

message EmptyRequest {}

message NetworkInfo {
  string id = 1;
  int32 peer_count = 2;
  string network_name = 3;
}

message NodeInfoResponse {
  // build time
  string build_time = 1;
  // git hash
  string git_hash = 2;
  // node mode
  string mode = 3;
  // network connection information
  NetworkInfo network = 4;
  // code version string
  string code_version = 5;
  // server time
  int64 server_time = 6;
  google.protobuf.Timestamp time = 7;
}

// The message defines chain information response.
message ChainInfoResponse {
  // the name of network, such mainnet or testnet
  string net_name = 1;
  // the iost protocol version
  string protocol_version = 2;
  // chain id
  uint32 chain_id = 3;
  // head block height
  int64 head_block = 4;
  // head block hash
  string head_block_hash = 5;
  // last irreversible block number
  int64 lib_block = 6;
  // last irreversible block hash
  string lib_block_hash = 7;
  // the current witness list
  repeated string witness_list = 8;
  // the active witness list of lat irreversible block
  repeated string lib_witness_list = 9;
  // the pending witness list
  repeated string pending_witness_list = 10;
  // the head block time
  int64 head_block_time = 11;
  // the last irreversible block time
  int64 lib_block_time = 12;
}